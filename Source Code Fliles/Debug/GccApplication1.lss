
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000d32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c3  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  0000215b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092f  00000000  00000000  000029ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  0000331c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000836  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000041ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1f 04 	call	0x83e	; 0x83e <main>
  74:	0c 94 5d 06 	jmp	0xcba	; 0xcba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app>:
//global variables
int Current_State;
//function definitions
void app(void){
	
	INT0_init(&Current_State);
  7c:	80 e6       	ldi	r24, 0x60	; 96
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 06 04 	call	0x80c	; 0x80c <INT0_init>
	
	while (1)
	{
		Current_State=stop_walking_green;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LED_on(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		delay(5000);
  98:	88 e8       	ldi	r24, 0x88	; 136
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	0e 94 c2 00 	call	0x184	; 0x184 <delay>
		LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		
		for (int i =0;i<5;i++)
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	17 c0       	rjmp	.+46     	; 0xdc <app+0x60>
		{
			Current_State=stop_walking_yellow;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			delay(500);
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 c2 00 	call	0x184	; 0x184 <delay>
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			delay(500);
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 c2 00 	call	0x184	; 0x184 <delay>
		Current_State=stop_walking_green;
		LED_on(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
		delay(5000);
		LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
		
		for (int i =0;i<5;i++)
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	c5 30       	cpi	r28, 0x05	; 5
  de:	d1 05       	cpc	r29, r1
  e0:	34 f3       	brlt	.-52     	; 0xae <app+0x32>
			delay(500);
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
			delay(500);
		}
		
		Current_State=walk_red;
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LED_on(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		delay(5000);
  f6:	88 e8       	ldi	r24, 0x88	; 136
  f8:	93 e1       	ldi	r25, 0x13	; 19
  fa:	0e 94 c2 00 	call	0x184	; 0x184 <delay>
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		
		for (int i =0;i<5;i++)
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	17 c0       	rjmp	.+46     	; 0x13a <app+0xbe>
		{
			Current_State=stop_walking_yellow;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 114:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			delay(500);
 120:	84 ef       	ldi	r24, 0xF4	; 244
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 c2 00 	call	0x184	; 0x184 <delay>
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			delay(500);
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 c2 00 	call	0x184	; 0x184 <delay>
		Current_State=walk_red;
		LED_on(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
		delay(5000);
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
		
		for (int i =0;i<5;i++)
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	c5 30       	cpi	r28, 0x05	; 5
 13c:	d1 05       	cpc	r29, r1
 13e:	34 f3       	brlt	.-52     	; 0x10c <app+0x90>
 140:	a1 cf       	rjmp	.-190    	; 0x84 <app+0x8>

00000142 <pow>:
#include "../registers.h"
//global variables
//function definitions
int pow(int base, int exp)
{
	if(exp < 0)
 142:	77 23       	and	r23, r23
 144:	e4 f0       	brlt	.+56     	; 0x17e <pow+0x3c>
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	13 c0       	rjmp	.+38     	; 0x172 <pow+0x30>
	return -1;

	int result = 1;
	while (exp)
	{
		if (exp & 1)
 14c:	60 ff       	sbrs	r22, 0
 14e:	08 c0       	rjmp	.+16     	; 0x160 <pow+0x1e>
		result *= base;
 150:	a9 01       	movw	r20, r18
 152:	48 9f       	mul	r20, r24
 154:	90 01       	movw	r18, r0
 156:	49 9f       	mul	r20, r25
 158:	30 0d       	add	r19, r0
 15a:	58 9f       	mul	r21, r24
 15c:	30 0d       	add	r19, r0
 15e:	11 24       	eor	r1, r1
		exp >>= 1;
 160:	75 95       	asr	r23
 162:	67 95       	ror	r22
		base *= base;
 164:	ac 01       	movw	r20, r24
 166:	44 9f       	mul	r20, r20
 168:	c0 01       	movw	r24, r0
 16a:	45 9f       	mul	r20, r21
 16c:	90 0d       	add	r25, r0
 16e:	90 0d       	add	r25, r0
 170:	11 24       	eor	r1, r1
{
	if(exp < 0)
	return -1;

	int result = 1;
	while (exp)
 172:	61 15       	cp	r22, r1
 174:	71 05       	cpc	r23, r1
 176:	51 f7       	brne	.-44     	; 0x14c <pow+0xa>
		result *= base;
		exp >>= 1;
		base *= base;
	}

	return result;
 178:	82 2f       	mov	r24, r18
 17a:	93 2f       	mov	r25, r19
 17c:	08 95       	ret
//global variables
//function definitions
int pow(int base, int exp)
{
	if(exp < 0)
	return -1;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	9f ef       	ldi	r25, 0xFF	; 255
		exp >>= 1;
		base *= base;
	}

	return result;
}
 182:	08 95       	ret

00000184 <delay>:

void delay(int T_ms_delay){
 184:	4f 92       	push	r4
 186:	5f 92       	push	r5
 188:	6f 92       	push	r6
 18a:	7f 92       	push	r7
 18c:	8f 92       	push	r8
 18e:	9f 92       	push	r9
 190:	af 92       	push	r10
 192:	bf 92       	push	r11
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	28 97       	sbiw	r28, 0x08	; 8
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
	#define TCCR_0 *((volatile uint8_t*)0x53)
	#define TCNT_0 *((volatile uint8_t*)0x52)
	#define TIFR_0 *((volatile uint8_t*)0x58)
		float T_delay=T_ms_delay/1000.0;
 1b0:	bc 01       	movw	r22, r24
 1b2:	99 0f       	add	r25, r25
 1b4:	88 0b       	sbc	r24, r24
 1b6:	99 0b       	sbc	r25, r25
 1b8:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	4a e7       	ldi	r20, 0x7A	; 122
 1c2:	54 e4       	ldi	r21, 0x44	; 68
 1c4:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 1c8:	69 83       	std	Y+1, r22	; 0x01
 1ca:	7a 83       	std	Y+2, r23	; 0x02
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	9c 83       	std	Y+4, r25	; 0x04
		
		float T_tic,T_max_delay,Timer_intial_value, N_overflows;

		T_tic=Prescaler/Fclock;
		T_max_delay=T_tic*pow(2,n);
 1d0:	68 e0       	ldi	r22, 0x08	; 8
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 a1 00 	call	0x142	; 0x142 <pow>
 1dc:	bc 01       	movw	r22, r24
 1de:	99 0f       	add	r25, r25
 1e0:	88 0b       	sbc	r24, r24
 1e2:	99 0b       	sbc	r25, r25
 1e4:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 1e8:	6d 83       	std	Y+5, r22	; 0x05
 1ea:	7e 83       	std	Y+6, r23	; 0x06
 1ec:	8f 83       	std	Y+7, r24	; 0x07
 1ee:	98 87       	std	Y+8, r25	; 0x08
 1f0:	2d eb       	ldi	r18, 0xBD	; 189
 1f2:	37 e3       	ldi	r19, 0x37	; 55
 1f4:	46 e8       	ldi	r20, 0x86	; 134
 1f6:	5a e3       	ldi	r21, 0x3A	; 58
 1f8:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulsf3>
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
		if (((T_delay/T_max_delay)-(int)(T_delay/T_max_delay))>=0.5){
 200:	69 81       	ldd	r22, Y+1	; 0x01
 202:	7a 81       	ldd	r23, Y+2	; 0x02
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	9c 81       	ldd	r25, Y+4	; 0x04
 208:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 20c:	2b 01       	movw	r4, r22
 20e:	3c 01       	movw	r6, r24
 210:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixsfsi>
 214:	4b 01       	movw	r8, r22
 216:	5c 01       	movw	r10, r24
 218:	07 2e       	mov	r0, r23
 21a:	00 0c       	add	r0, r0
 21c:	88 0b       	sbc	r24, r24
 21e:	99 0b       	sbc	r25, r25
 220:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 224:	6b 01       	movw	r12, r22
 226:	7c 01       	movw	r14, r24
 228:	9b 01       	movw	r18, r22
 22a:	ac 01       	movw	r20, r24
 22c:	c3 01       	movw	r24, r6
 22e:	b2 01       	movw	r22, r4
 230:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	5f e3       	ldi	r21, 0x3F	; 63
 23c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 240:	88 23       	and	r24, r24
 242:	5c f0       	brlt	.+22     	; 0x25a <delay+0xd6>
			N_overflows=(int)(T_delay/T_max_delay)+1;
 244:	b4 01       	movw	r22, r8
 246:	6f 5f       	subi	r22, 0xFF	; 255
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	07 2e       	mov	r0, r23
 24c:	00 0c       	add	r0, r0
 24e:	88 0b       	sbc	r24, r24
 250:	99 0b       	sbc	r25, r25
 252:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 256:	6b 01       	movw	r12, r22
 258:	7c 01       	movw	r14, r24
		}
		else{
			N_overflows=(int)(T_delay/T_max_delay);
		}
		
		Timer_intial_value=pow(2,n)-((T_delay/T_tic)/N_overflows);
 25a:	2d eb       	ldi	r18, 0xBD	; 189
 25c:	37 e3       	ldi	r19, 0x37	; 55
 25e:	46 e8       	ldi	r20, 0x86	; 134
 260:	5a e3       	ldi	r21, 0x3A	; 58
 262:	69 81       	ldd	r22, Y+1	; 0x01
 264:	7a 81       	ldd	r23, Y+2	; 0x02
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	9c 81       	ldd	r25, Y+4	; 0x04
 26a:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 26e:	a7 01       	movw	r20, r14
 270:	96 01       	movw	r18, r12
 272:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	6d 81       	ldd	r22, Y+5	; 0x05
 27c:	7e 81       	ldd	r23, Y+6	; 0x06
 27e:	8f 81       	ldd	r24, Y+7	; 0x07
 280:	98 85       	ldd	r25, Y+8	; 0x08
 282:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 286:	69 83       	std	Y+1, r22	; 0x01
 288:	7a 83       	std	Y+2, r23	; 0x02
 28a:	8b 83       	std	Y+3, r24	; 0x03
 28c:	9c 83       	std	Y+4, r25	; 0x04
		
		if (((Timer_intial_value)-(int)(Timer_intial_value))>=0.5){
 28e:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixsfsi>
 292:	2b 01       	movw	r4, r22
 294:	3c 01       	movw	r6, r24
 296:	07 2e       	mov	r0, r23
 298:	00 0c       	add	r0, r0
 29a:	88 0b       	sbc	r24, r24
 29c:	99 0b       	sbc	r25, r25
 29e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 2a2:	4b 01       	movw	r8, r22
 2a4:	5c 01       	movw	r10, r24
 2a6:	9b 01       	movw	r18, r22
 2a8:	ac 01       	movw	r20, r24
 2aa:	69 81       	ldd	r22, Y+1	; 0x01
 2ac:	7a 81       	ldd	r23, Y+2	; 0x02
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	5f e3       	ldi	r21, 0x3F	; 63
 2be:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 2c2:	88 23       	and	r24, r24
 2c4:	5c f0       	brlt	.+22     	; 0x2dc <delay+0x158>
			Timer_intial_value=(int)(Timer_intial_value)+1;
 2c6:	b2 01       	movw	r22, r4
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	07 2e       	mov	r0, r23
 2ce:	00 0c       	add	r0, r0
 2d0:	88 0b       	sbc	r24, r24
 2d2:	99 0b       	sbc	r25, r25
 2d4:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 2d8:	4b 01       	movw	r8, r22
 2da:	5c 01       	movw	r10, r24
		}
		else{
			Timer_intial_value=(int)(Timer_intial_value);
		}
		TCCR_0=0x00; //Normal Mode
 2dc:	13 be       	out	0x33, r1	; 51
		
				//Set Timer Initial Value
				TCNT_0=(uint8_t)Timer_intial_value;
 2de:	c5 01       	movw	r24, r10
 2e0:	b4 01       	movw	r22, r8
 2e2:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fixunssfsi>
 2e6:	62 bf       	out	0x32, r22	; 50
				
				// Timer Start (1024 Prescaler)
				TCCR_0 |= (1<<0);
 2e8:	83 b7       	in	r24, 0x33	; 51
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	83 bf       	out	0x33, r24	; 51
				TCCR_0 |= (1<<2);
 2ee:	83 b7       	in	r24, 0x33	; 51
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	83 bf       	out	0x33, r24	; 51
				
				unsigned int overFolowsConter =0;
 2f4:	a1 2c       	mov	r10, r1
 2f6:	b1 2c       	mov	r11, r1
				while(overFolowsConter<N_overflows)
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <delay+0x188>
				{
					//wait until overflow flag to be set
					while((TIFR_0 & (1<<0))==0);
 2fa:	08 b6       	in	r0, 0x38	; 56
 2fc:	00 fe       	sbrs	r0, 0
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <delay+0x176>
					
					//clear over flow flag
					TIFR_0 |=(1<<0);
 300:	88 b7       	in	r24, 0x38	; 56
 302:	81 60       	ori	r24, 0x01	; 1
 304:	88 bf       	out	0x38, r24	; 56
					
					overFolowsConter++;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	a8 1a       	sub	r10, r24
 30a:	b8 0a       	sbc	r11, r24
				// Timer Start (1024 Prescaler)
				TCCR_0 |= (1<<0);
				TCCR_0 |= (1<<2);
				
				unsigned int overFolowsConter =0;
				while(overFolowsConter<N_overflows)
 30c:	b5 01       	movw	r22, r10
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 39 05 	call	0xa72	; 0xa72 <__floatunsisf>
 316:	9b 01       	movw	r18, r22
 318:	ac 01       	movw	r20, r24
 31a:	c7 01       	movw	r24, r14
 31c:	b6 01       	movw	r22, r12
 31e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 322:	18 16       	cp	r1, r24
 324:	54 f3       	brlt	.-44     	; 0x2fa <delay+0x176>
					overFolowsConter++;
				}
				overFolowsConter=0;
				
				//Timer Stop
				TCCR_0=0x00;
 326:	13 be       	out	0x33, r1	; 51
}
 328:	28 96       	adiw	r28, 0x08	; 8
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	bf 90       	pop	r11
 342:	af 90       	pop	r10
 344:	9f 90       	pop	r9
 346:	8f 90       	pop	r8
 348:	7f 90       	pop	r7
 34a:	6f 90       	pop	r6
 34c:	5f 90       	pop	r5
 34e:	4f 90       	pop	r4
 350:	08 95       	ret

00000352 <delay_INT>:

void delay_INT(int T_ms_delay){
 352:	4f 92       	push	r4
 354:	5f 92       	push	r5
 356:	6f 92       	push	r6
 358:	7f 92       	push	r7
 35a:	8f 92       	push	r8
 35c:	9f 92       	push	r9
 35e:	af 92       	push	r10
 360:	bf 92       	push	r11
 362:	cf 92       	push	r12
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	28 97       	sbiw	r28, 0x08	; 8
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
	#define TCCR_0 *((volatile uint8_t*)0x53)
	#define TCNT_0 *((volatile uint8_t*)0x52)
	#define TIFR_0 *((volatile uint8_t*)0x58)
	float T_delay=T_ms_delay/1000.0;
 37e:	bc 01       	movw	r22, r24
 380:	99 0f       	add	r25, r25
 382:	88 0b       	sbc	r24, r24
 384:	99 0b       	sbc	r25, r25
 386:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	4a e7       	ldi	r20, 0x7A	; 122
 390:	54 e4       	ldi	r21, 0x44	; 68
 392:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 396:	69 83       	std	Y+1, r22	; 0x01
 398:	7a 83       	std	Y+2, r23	; 0x02
 39a:	8b 83       	std	Y+3, r24	; 0x03
 39c:	9c 83       	std	Y+4, r25	; 0x04
	
	float T_tic,T_max_delay,Timer_intial_value, N_overflows;

	T_tic=Prescaler/Fclock;
	T_max_delay=T_tic*pow(2,n);
 39e:	68 e0       	ldi	r22, 0x08	; 8
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 a1 00 	call	0x142	; 0x142 <pow>
 3aa:	bc 01       	movw	r22, r24
 3ac:	99 0f       	add	r25, r25
 3ae:	88 0b       	sbc	r24, r24
 3b0:	99 0b       	sbc	r25, r25
 3b2:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 3b6:	6d 83       	std	Y+5, r22	; 0x05
 3b8:	7e 83       	std	Y+6, r23	; 0x06
 3ba:	8f 83       	std	Y+7, r24	; 0x07
 3bc:	98 87       	std	Y+8, r25	; 0x08
 3be:	2d eb       	ldi	r18, 0xBD	; 189
 3c0:	37 e3       	ldi	r19, 0x37	; 55
 3c2:	46 e8       	ldi	r20, 0x86	; 134
 3c4:	5a e3       	ldi	r21, 0x3A	; 58
 3c6:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulsf3>
 3ca:	9b 01       	movw	r18, r22
 3cc:	ac 01       	movw	r20, r24
	if (((T_delay/T_max_delay)-(int)(T_delay/T_max_delay))>=0.5){
 3ce:	69 81       	ldd	r22, Y+1	; 0x01
 3d0:	7a 81       	ldd	r23, Y+2	; 0x02
 3d2:	8b 81       	ldd	r24, Y+3	; 0x03
 3d4:	9c 81       	ldd	r25, Y+4	; 0x04
 3d6:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 3da:	2b 01       	movw	r4, r22
 3dc:	3c 01       	movw	r6, r24
 3de:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixsfsi>
 3e2:	4b 01       	movw	r8, r22
 3e4:	5c 01       	movw	r10, r24
 3e6:	07 2e       	mov	r0, r23
 3e8:	00 0c       	add	r0, r0
 3ea:	88 0b       	sbc	r24, r24
 3ec:	99 0b       	sbc	r25, r25
 3ee:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 3f2:	6b 01       	movw	r12, r22
 3f4:	7c 01       	movw	r14, r24
 3f6:	9b 01       	movw	r18, r22
 3f8:	ac 01       	movw	r20, r24
 3fa:	c3 01       	movw	r24, r6
 3fc:	b2 01       	movw	r22, r4
 3fe:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	5f e3       	ldi	r21, 0x3F	; 63
 40a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 40e:	88 23       	and	r24, r24
 410:	5c f0       	brlt	.+22     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		N_overflows=(int)(T_delay/T_max_delay)+1;
 412:	b4 01       	movw	r22, r8
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	07 2e       	mov	r0, r23
 41a:	00 0c       	add	r0, r0
 41c:	88 0b       	sbc	r24, r24
 41e:	99 0b       	sbc	r25, r25
 420:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 424:	6b 01       	movw	r12, r22
 426:	7c 01       	movw	r14, r24
	}
	else{
		N_overflows=(int)(T_delay/T_max_delay);
	}
	
	Timer_intial_value=pow(2,n)-((T_delay/T_tic)/N_overflows);
 428:	2d eb       	ldi	r18, 0xBD	; 189
 42a:	37 e3       	ldi	r19, 0x37	; 55
 42c:	46 e8       	ldi	r20, 0x86	; 134
 42e:	5a e3       	ldi	r21, 0x3A	; 58
 430:	69 81       	ldd	r22, Y+1	; 0x01
 432:	7a 81       	ldd	r23, Y+2	; 0x02
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	9c 81       	ldd	r25, Y+4	; 0x04
 438:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 43c:	a7 01       	movw	r20, r14
 43e:	96 01       	movw	r18, r12
 440:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3>
 444:	9b 01       	movw	r18, r22
 446:	ac 01       	movw	r20, r24
 448:	6d 81       	ldd	r22, Y+5	; 0x05
 44a:	7e 81       	ldd	r23, Y+6	; 0x06
 44c:	8f 81       	ldd	r24, Y+7	; 0x07
 44e:	98 85       	ldd	r25, Y+8	; 0x08
 450:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 454:	69 83       	std	Y+1, r22	; 0x01
 456:	7a 83       	std	Y+2, r23	; 0x02
 458:	8b 83       	std	Y+3, r24	; 0x03
 45a:	9c 83       	std	Y+4, r25	; 0x04
	
	if (((Timer_intial_value)-(int)(Timer_intial_value))>=0.5){
 45c:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixsfsi>
 460:	2b 01       	movw	r4, r22
 462:	3c 01       	movw	r6, r24
 464:	07 2e       	mov	r0, r23
 466:	00 0c       	add	r0, r0
 468:	88 0b       	sbc	r24, r24
 46a:	99 0b       	sbc	r25, r25
 46c:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 470:	4b 01       	movw	r8, r22
 472:	5c 01       	movw	r10, r24
 474:	9b 01       	movw	r18, r22
 476:	ac 01       	movw	r20, r24
 478:	69 81       	ldd	r22, Y+1	; 0x01
 47a:	7a 81       	ldd	r23, Y+2	; 0x02
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	9c 81       	ldd	r25, Y+4	; 0x04
 480:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	5f e3       	ldi	r21, 0x3F	; 63
 48c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 490:	88 23       	and	r24, r24
 492:	5c f0       	brlt	.+22     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		Timer_intial_value=(int)(Timer_intial_value)+1;
 494:	b2 01       	movw	r22, r4
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	07 2e       	mov	r0, r23
 49c:	00 0c       	add	r0, r0
 49e:	88 0b       	sbc	r24, r24
 4a0:	99 0b       	sbc	r25, r25
 4a2:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatsisf>
 4a6:	4b 01       	movw	r8, r22
 4a8:	5c 01       	movw	r10, r24
	}
	else{
		Timer_intial_value=(int)(Timer_intial_value);
	}
	TCCR_2=0x00; //Normal Mode
 4aa:	15 bc       	out	0x25, r1	; 37
	
	//Set Timer Initial Value
	TCNT_2=(uint8_t)Timer_intial_value;
 4ac:	c5 01       	movw	r24, r10
 4ae:	b4 01       	movw	r22, r8
 4b0:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fixunssfsi>
 4b4:	64 bd       	out	0x24, r22	; 36
	
	// Timer Start (1024 Prescaler)
	TCCR_2 |= (1<<0);
 4b6:	85 b5       	in	r24, 0x25	; 37
 4b8:	81 60       	ori	r24, 0x01	; 1
 4ba:	85 bd       	out	0x25, r24	; 37
	TCCR_2 |= (1<<1);
 4bc:	85 b5       	in	r24, 0x25	; 37
 4be:	82 60       	ori	r24, 0x02	; 2
 4c0:	85 bd       	out	0x25, r24	; 37
	TCCR_2 |= (1<<2);
 4c2:	85 b5       	in	r24, 0x25	; 37
 4c4:	84 60       	ori	r24, 0x04	; 4
 4c6:	85 bd       	out	0x25, r24	; 37
	
	unsigned int overFolowsConter =0;
 4c8:	a1 2c       	mov	r10, r1
 4ca:	b1 2c       	mov	r11, r1
	while(overFolowsConter<N_overflows)
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
	{
		//wait until overflow flag to be set
		while((TIFR_2 & (1<<6))==0);
 4ce:	08 b6       	in	r0, 0x38	; 56
 4d0:	06 fe       	sbrs	r0, 6
 4d2:	fd cf       	rjmp	.-6      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		
		//clear over flow flag
		TIFR_2 |=(1<<6);
 4d4:	88 b7       	in	r24, 0x38	; 56
 4d6:	80 64       	ori	r24, 0x40	; 64
 4d8:	88 bf       	out	0x38, r24	; 56
		
		overFolowsConter++;
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	a8 1a       	sub	r10, r24
 4de:	b8 0a       	sbc	r11, r24
	TCCR_2 |= (1<<0);
	TCCR_2 |= (1<<1);
	TCCR_2 |= (1<<2);
	
	unsigned int overFolowsConter =0;
	while(overFolowsConter<N_overflows)
 4e0:	b5 01       	movw	r22, r10
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 39 05 	call	0xa72	; 0xa72 <__floatunsisf>
 4ea:	9b 01       	movw	r18, r22
 4ec:	ac 01       	movw	r20, r24
 4ee:	c7 01       	movw	r24, r14
 4f0:	b6 01       	movw	r22, r12
 4f2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 4f6:	18 16       	cp	r1, r24
 4f8:	54 f3       	brlt	.-44     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		overFolowsConter++;
	}
	overFolowsConter=0;
	
	//Timer Stop
	TCCR_2=0x00;
 4fa:	15 bc       	out	0x25, r1	; 37
 4fc:	28 96       	adiw	r28, 0x08	; 8
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	df 90       	pop	r13
 512:	cf 90       	pop	r12
 514:	bf 90       	pop	r11
 516:	af 90       	pop	r10
 518:	9f 90       	pop	r9
 51a:	8f 90       	pop	r8
 51c:	7f 90       	pop	r7
 51e:	6f 90       	pop	r6
 520:	5f 90       	pop	r5
 522:	4f 90       	pop	r4
 524:	08 95       	ret

00000526 <DIO_write>:
	}
	
}

void DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	switch (portNumber){
 526:	81 34       	cpi	r24, 0x41	; 65
 528:	19 f0       	breq	.+6      	; 0x530 <DIO_write+0xa>
 52a:	82 34       	cpi	r24, 0x42	; 66
 52c:	e1 f0       	breq	.+56     	; 0x566 <DIO_write+0x40>
 52e:	08 95       	ret
		case PORT_a:
		if (value==LOW){
 530:	41 11       	cpse	r20, r1
 532:	0c c0       	rjmp	.+24     	; 0x54c <DIO_write+0x26>
			PORT_A &= ~(1<<pinNumber);
 534:	2b b3       	in	r18, 0x1b	; 27
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_write+0x1a>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_write+0x16>
 544:	80 95       	com	r24
 546:	82 23       	and	r24, r18
 548:	8b bb       	out	0x1b, r24	; 27
 54a:	08 95       	ret
			
		}
		else if (value == HIGH){
 54c:	41 30       	cpi	r20, 0x01	; 1
 54e:	29 f5       	brne	.+74     	; 0x59a <DIO_write+0x74>
			PORT_A |= (1<<pinNumber);
 550:	2b b3       	in	r18, 0x1b	; 27
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_write+0x36>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_write+0x32>
 560:	82 2b       	or	r24, r18
 562:	8b bb       	out	0x1b, r24	; 27
 564:	08 95       	ret
		}
		break;
		case PORT_b:
		if (value==LOW){
 566:	41 11       	cpse	r20, r1
 568:	0c c0       	rjmp	.+24     	; 0x582 <DIO_write+0x5c>
			PORT_B &= ~(1<<pinNumber);
 56a:	28 b3       	in	r18, 0x18	; 24
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_write+0x50>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_write+0x4c>
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	88 bb       	out	0x18, r24	; 24
 580:	08 95       	ret
			
		}
		else if (value == HIGH){
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	51 f4       	brne	.+20     	; 0x59a <DIO_write+0x74>
			PORT_B |= (1<<pinNumber);
 586:	28 b3       	in	r18, 0x18	; 24
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_write+0x6c>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_write+0x68>
 596:	82 2b       	or	r24, r18
 598:	88 bb       	out	0x18, r24	; 24
 59a:	08 95       	ret

0000059c <__vector_1>:

//global variables
int *mode_state;

//function definitions
void __vector_1 (void){
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	ef 93       	push	r30
 5c0:	ff 93       	push	r31


					LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	81 e4       	ldi	r24, 0x41	; 65
 5c6:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					LED_off(LED_Pedestrians_RED_PORT,LED_Pedestrians_RED_PIN);
 5ca:	62 e0       	ldi	r22, 0x02	; 2
 5cc:	82 e4       	ldi	r24, 0x42	; 66
 5ce:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	81 e4       	ldi	r24, 0x41	; 65
 5d6:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					LED_off(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	82 e4       	ldi	r24, 0x42	; 66
 5de:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 5e2:	62 e0       	ldi	r22, 0x02	; 2
 5e4:	81 e4       	ldi	r24, 0x41	; 65
 5e6:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	82 e4       	ldi	r24, 0x42	; 66
 5ee:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
	  
	switch (*mode_state){
 5f2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <mode_state>
 5f6:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <mode_state+0x1>
 5fa:	80 81       	ld	r24, Z
 5fc:	91 81       	ldd	r25, Z+1	; 0x01
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	91 05       	cpc	r25, r1
 602:	09 f4       	brne	.+2      	; 0x606 <__vector_1+0x6a>
 604:	84 c0       	rjmp	.+264    	; 0x70e <__vector_1+0x172>
 606:	83 30       	cpi	r24, 0x03	; 3
 608:	91 05       	cpc	r25, r1
 60a:	09 f4       	brne	.+2      	; 0x60e <__vector_1+0x72>
 60c:	9a c0       	rjmp	.+308    	; 0x742 <__vector_1+0x1a6>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	09 f0       	breq	.+2      	; 0x614 <__vector_1+0x78>
 612:	e9 c0       	rjmp	.+466    	; 0x7e6 <__vector_1+0x24a>

		case stop_walking_green:
		
		LED_on(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	81 e4       	ldi	r24, 0x41	; 65
 618:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		LED_on(LED_Pedestrians_RED_PORT,LED_Pedestrians_RED_PIN);
 61c:	62 e0       	ldi	r22, 0x02	; 2
 61e:	82 e4       	ldi	r24, 0x42	; 66
 620:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		delay_INT(5000);
 624:	88 e8       	ldi	r24, 0x88	; 136
 626:	93 e1       	ldi	r25, 0x13	; 19
 628:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	81 e4       	ldi	r24, 0x41	; 65
 630:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		LED_off(LED_Pedestrians_RED_PORT,LED_Pedestrians_RED_PIN);
 634:	62 e0       	ldi	r22, 0x02	; 2
 636:	82 e4       	ldi	r24, 0x42	; 66
 638:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		
		for (int i =0;i<5;i++)
 63c:	c0 e0       	ldi	r28, 0x00	; 0
 63e:	d0 e0       	ldi	r29, 0x00	; 0
 640:	19 c0       	rjmp	.+50     	; 0x674 <__vector_1+0xd8>
		{
			
			LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	81 e4       	ldi	r24, 0x41	; 65
 646:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			LED_on(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	82 e4       	ldi	r24, 0x42	; 66
 64e:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			delay_INT(500);
 652:	84 ef       	ldi	r24, 0xF4	; 244
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	81 e4       	ldi	r24, 0x41	; 65
 65e:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			LED_off(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	82 e4       	ldi	r24, 0x42	; 66
 666:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			delay_INT(500);
 66a:	84 ef       	ldi	r24, 0xF4	; 244
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_on(LED_Pedestrians_RED_PORT,LED_Pedestrians_RED_PIN);
		delay_INT(5000);
		LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
		LED_off(LED_Pedestrians_RED_PORT,LED_Pedestrians_RED_PIN);
		
		for (int i =0;i<5;i++)
 672:	21 96       	adiw	r28, 0x01	; 1
 674:	c5 30       	cpi	r28, 0x05	; 5
 676:	d1 05       	cpc	r29, r1
 678:	24 f3       	brlt	.-56     	; 0x642 <__vector_1+0xa6>
			LED_off(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
			delay_INT(500);
		}
		
		
		LED_on(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 67a:	62 e0       	ldi	r22, 0x02	; 2
 67c:	81 e4       	ldi	r24, 0x41	; 65
 67e:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		LED_on(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	82 e4       	ldi	r24, 0x42	; 66
 686:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		delay_INT(5000);
 68a:	88 e8       	ldi	r24, 0x88	; 136
 68c:	93 e1       	ldi	r25, 0x13	; 19
 68e:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	81 e4       	ldi	r24, 0x41	; 65
 696:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	82 e4       	ldi	r24, 0x42	; 66
 69e:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		
		for (int i =0;i<5;i++)
 6a2:	c0 e0       	ldi	r28, 0x00	; 0
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
 6a6:	11 c0       	rjmp	.+34     	; 0x6ca <__vector_1+0x12e>
		{
	
			LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	81 e4       	ldi	r24, 0x41	; 65
 6ac:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			delay_INT(500);
 6b0:	84 ef       	ldi	r24, 0xF4	; 244
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	81 e4       	ldi	r24, 0x41	; 65
 6bc:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			delay_INT(500);
 6c0:	84 ef       	ldi	r24, 0xF4	; 244
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_on(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
		delay_INT(5000);
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
		LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
		
		for (int i =0;i<5;i++)
 6c8:	21 96       	adiw	r28, 0x01	; 1
 6ca:	c5 30       	cpi	r28, 0x05	; 5
 6cc:	d1 05       	cpc	r29, r1
 6ce:	64 f3       	brlt	.-40     	; 0x6a8 <__vector_1+0x10c>
			LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
			delay_INT(500);
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
			delay_INT(500);
		}
		LED_on(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	81 e4       	ldi	r24, 0x41	; 65
 6d4:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		
		
		
		break;
 6d8:	86 c0       	rjmp	.+268    	; 0x7e6 <__vector_1+0x24a>

		case stop_walking_yellow:
		for (int i =0;i<5;i++)
		{
			
			LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	81 e4       	ldi	r24, 0x41	; 65
 6de:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			LED_on(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	82 e4       	ldi	r24, 0x42	; 66
 6e6:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
			delay_INT(500);
 6ea:	84 ef       	ldi	r24, 0xF4	; 244
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
			LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	81 e4       	ldi	r24, 0x41	; 65
 6f6:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			LED_off(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	82 e4       	ldi	r24, 0x42	; 66
 6fe:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
			delay_INT(500);
 702:	84 ef       	ldi	r24, 0xF4	; 244
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		
		
		break;

		case stop_walking_yellow:
		for (int i =0;i<5;i++)
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	02 c0       	rjmp	.+4      	; 0x712 <__vector_1+0x176>
					LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
					LED_off(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
					LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
					LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
	  
	switch (*mode_state){
 70e:	c0 e0       	ldi	r28, 0x00	; 0
 710:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		break;

		case stop_walking_yellow:
		for (int i =0;i<5;i++)
 712:	c5 30       	cpi	r28, 0x05	; 5
 714:	d1 05       	cpc	r29, r1
 716:	0c f3       	brlt	.-62     	; 0x6da <__vector_1+0x13e>
			LED_off(LED_Pedestrians_YELLOW_PORT,LED_Pedestrians_YELLOW_PIN);
			delay_INT(500);
		}
		
		
		LED_on(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 718:	62 e0       	ldi	r22, 0x02	; 2
 71a:	81 e4       	ldi	r24, 0x41	; 65
 71c:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		LED_on(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	82 e4       	ldi	r24, 0x42	; 66
 724:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		delay_INT(5000);
 728:	88 e8       	ldi	r24, 0x88	; 136
 72a:	93 e1       	ldi	r25, 0x13	; 19
 72c:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	81 e4       	ldi	r24, 0x41	; 65
 734:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	82 e4       	ldi	r24, 0x42	; 66
 73c:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		

		break;
 740:	52 c0       	rjmp	.+164    	; 0x7e6 <__vector_1+0x24a>
		
		case walk_red:
		LED_on(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 742:	62 e0       	ldi	r22, 0x02	; 2
 744:	81 e4       	ldi	r24, 0x41	; 65
 746:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		LED_on(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	82 e4       	ldi	r24, 0x42	; 66
 74e:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		delay_INT(5000);
 752:	88 e8       	ldi	r24, 0x88	; 136
 754:	93 e1       	ldi	r25, 0x13	; 19
 756:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 75a:	62 e0       	ldi	r22, 0x02	; 2
 75c:	81 e4       	ldi	r24, 0x41	; 65
 75e:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	82 e4       	ldi	r24, 0x42	; 66
 766:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
		
				for (int i =0;i<5;i++)
 76a:	c0 e0       	ldi	r28, 0x00	; 0
 76c:	d0 e0       	ldi	r29, 0x00	; 0
 76e:	11 c0       	rjmp	.+34     	; 0x792 <__vector_1+0x1f6>
				{
					
					LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	81 e4       	ldi	r24, 0x41	; 65
 774:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
					delay_INT(500);
 778:	84 ef       	ldi	r24, 0xF4	; 244
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
					LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	81 e4       	ldi	r24, 0x41	; 65
 784:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					delay_INT(500);
 788:	84 ef       	ldi	r24, 0xF4	; 244
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
		LED_on(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
		delay_INT(5000);
		LED_off(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
		LED_off(LED_Pedestrians_GREEN_PORT,LED_Pedestrians_GREEN_PIN);
		
				for (int i =0;i<5;i++)
 790:	21 96       	adiw	r28, 0x01	; 1
 792:	c5 30       	cpi	r28, 0x05	; 5
 794:	d1 05       	cpc	r29, r1
 796:	64 f3       	brlt	.-40     	; 0x770 <__vector_1+0x1d4>
					LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
					delay_INT(500);
					LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
					delay_INT(500);
				}
							LED_on(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	81 e4       	ldi	r24, 0x41	; 65
 79c:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
							delay_INT(5000);
 7a0:	88 e8       	ldi	r24, 0x88	; 136
 7a2:	93 e1       	ldi	r25, 0x13	; 19
 7a4:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
							LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	81 e4       	ldi	r24, 0x41	; 65
 7ac:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
							
				for (int i =0;i<5;i++)
 7b0:	c0 e0       	ldi	r28, 0x00	; 0
 7b2:	d0 e0       	ldi	r29, 0x00	; 0
 7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <__vector_1+0x23c>
				{
					
					LED_on(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	81 e4       	ldi	r24, 0x41	; 65
 7ba:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
					delay_INT(500);
 7be:	84 ef       	ldi	r24, 0xF4	; 244
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
					LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	81 e4       	ldi	r24, 0x41	; 65
 7ca:	0e 94 1b 04 	call	0x836	; 0x836 <LED_off>
					delay_INT(500);
 7ce:	84 ef       	ldi	r24, 0xF4	; 244
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	0e 94 a9 01 	call	0x352	; 0x352 <delay_INT>
				}
							LED_on(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
							delay_INT(5000);
							LED_off(LED_CAR_GREEN_PORT,LED_CAR_GREEN_PIN);
							
				for (int i =0;i<5;i++)
 7d6:	21 96       	adiw	r28, 0x01	; 1
 7d8:	c5 30       	cpi	r28, 0x05	; 5
 7da:	d1 05       	cpc	r29, r1
 7dc:	64 f3       	brlt	.-40     	; 0x7b6 <__vector_1+0x21a>
					delay_INT(500);
					LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
					delay_INT(500);
				}
				
				LED_on(LED_CAR_RED_PORT,LED_CAR_RED_PIN);
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	81 e4       	ldi	r24, 0x41	; 65
 7e2:	0e 94 17 04 	call	0x82e	; 0x82e <LED_on>
		
	}



  }
 7e6:	ff 91       	pop	r31
 7e8:	ef 91       	pop	r30
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <INT0_init>:
 
void INT0_init(int *INT_State){
		mode_state=INT_State;
 80c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <mode_state+0x1>
 810:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mode_state>
		//Enable global interrupts
		SREG |= (1<<7);
 814:	8f b7       	in	r24, 0x3f	; 63
 816:	80 68       	ori	r24, 0x80	; 128
 818:	8f bf       	out	0x3f, r24	; 63
		
		//Choose external interrupts sense (INT0 Rising Edge)
		MCUCR |=(1<<0);
 81a:	85 b7       	in	r24, 0x35	; 53
 81c:	81 60       	ori	r24, 0x01	; 1
 81e:	85 bf       	out	0x35, r24	; 53
		MCUCR |=(1<<1);
 820:	85 b7       	in	r24, 0x35	; 53
 822:	82 60       	ori	r24, 0x02	; 2
 824:	85 bf       	out	0x35, r24	; 53
		
		//Enable INT0
		GICR |= (1<<6);
 826:	8b b7       	in	r24, 0x3b	; 59
 828:	80 64       	ori	r24, 0x40	; 64
 82a:	8b bf       	out	0x3b, r24	; 59
 82c:	08 95       	ret

0000082e <LED_on>:
//function definitions
void LED_init(uint8_t ledPort,uint8_t ledPin){
	DIO_init(ledPort,ledPin,OUT);
}
void LED_on(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,HIGH);
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	0e 94 93 02 	call	0x526	; 0x526 <DIO_write>
 834:	08 95       	ret

00000836 <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,LOW);
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	0e 94 93 02 	call	0x526	; 0x526 <DIO_write>
 83c:	08 95       	ret

0000083e <main>:

int Current_State;*/

int main(void)
{
	app();
 83e:	0e 94 3e 00 	call	0x7c	; 0x7c <app>
				LED_off(LED_CAR_YELLOW_PORT,LED_CAR_YELLOW_PIN);
				delay(500);
			}

    }*/
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	08 95       	ret

00000848 <__subsf3>:
 848:	50 58       	subi	r21, 0x80	; 128

0000084a <__addsf3>:
 84a:	bb 27       	eor	r27, r27
 84c:	aa 27       	eor	r26, r26
 84e:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3x>
 852:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_round>
 856:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscA>
 85a:	38 f0       	brcs	.+14     	; 0x86a <__stack+0xb>
 85c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscB>
 860:	20 f0       	brcs	.+8      	; 0x86a <__stack+0xb>
 862:	39 f4       	brne	.+14     	; 0x872 <__stack+0x13>
 864:	9f 3f       	cpi	r25, 0xFF	; 255
 866:	19 f4       	brne	.+6      	; 0x86e <__stack+0xf>
 868:	26 f4       	brtc	.+8      	; 0x872 <__stack+0x13>
 86a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
 86e:	0e f4       	brtc	.+2      	; 0x872 <__stack+0x13>
 870:	e0 95       	com	r30
 872:	e7 fb       	bst	r30, 7
 874:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>

00000878 <__addsf3x>:
 878:	e9 2f       	mov	r30, r25
 87a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_split3>
 87e:	58 f3       	brcs	.-42     	; 0x856 <__addsf3+0xc>
 880:	ba 17       	cp	r27, r26
 882:	62 07       	cpc	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	84 07       	cpc	r24, r20
 888:	95 07       	cpc	r25, r21
 88a:	20 f0       	brcs	.+8      	; 0x894 <__addsf3x+0x1c>
 88c:	79 f4       	brne	.+30     	; 0x8ac <__addsf3x+0x34>
 88e:	a6 f5       	brtc	.+104    	; 0x8f8 <__addsf3x+0x80>
 890:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_zero>
 894:	0e f4       	brtc	.+2      	; 0x898 <__addsf3x+0x20>
 896:	e0 95       	com	r30
 898:	0b 2e       	mov	r0, r27
 89a:	ba 2f       	mov	r27, r26
 89c:	a0 2d       	mov	r26, r0
 89e:	0b 01       	movw	r0, r22
 8a0:	b9 01       	movw	r22, r18
 8a2:	90 01       	movw	r18, r0
 8a4:	0c 01       	movw	r0, r24
 8a6:	ca 01       	movw	r24, r20
 8a8:	a0 01       	movw	r20, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	ff 27       	eor	r31, r31
 8ae:	59 1b       	sub	r21, r25
 8b0:	99 f0       	breq	.+38     	; 0x8d8 <__addsf3x+0x60>
 8b2:	59 3f       	cpi	r21, 0xF9	; 249
 8b4:	50 f4       	brcc	.+20     	; 0x8ca <__addsf3x+0x52>
 8b6:	50 3e       	cpi	r21, 0xE0	; 224
 8b8:	68 f1       	brcs	.+90     	; 0x914 <__addsf3x+0x9c>
 8ba:	1a 16       	cp	r1, r26
 8bc:	f0 40       	sbci	r31, 0x00	; 0
 8be:	a2 2f       	mov	r26, r18
 8c0:	23 2f       	mov	r18, r19
 8c2:	34 2f       	mov	r19, r20
 8c4:	44 27       	eor	r20, r20
 8c6:	58 5f       	subi	r21, 0xF8	; 248
 8c8:	f3 cf       	rjmp	.-26     	; 0x8b0 <__addsf3x+0x38>
 8ca:	46 95       	lsr	r20
 8cc:	37 95       	ror	r19
 8ce:	27 95       	ror	r18
 8d0:	a7 95       	ror	r26
 8d2:	f0 40       	sbci	r31, 0x00	; 0
 8d4:	53 95       	inc	r21
 8d6:	c9 f7       	brne	.-14     	; 0x8ca <__addsf3x+0x52>
 8d8:	7e f4       	brtc	.+30     	; 0x8f8 <__addsf3x+0x80>
 8da:	1f 16       	cp	r1, r31
 8dc:	ba 0b       	sbc	r27, r26
 8de:	62 0b       	sbc	r22, r18
 8e0:	73 0b       	sbc	r23, r19
 8e2:	84 0b       	sbc	r24, r20
 8e4:	ba f0       	brmi	.+46     	; 0x914 <__addsf3x+0x9c>
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	a1 f0       	breq	.+40     	; 0x912 <__addsf3x+0x9a>
 8ea:	ff 0f       	add	r31, r31
 8ec:	bb 1f       	adc	r27, r27
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	c2 f7       	brpl	.-16     	; 0x8e6 <__addsf3x+0x6e>
 8f6:	0e c0       	rjmp	.+28     	; 0x914 <__addsf3x+0x9c>
 8f8:	ba 0f       	add	r27, r26
 8fa:	62 1f       	adc	r22, r18
 8fc:	73 1f       	adc	r23, r19
 8fe:	84 1f       	adc	r24, r20
 900:	48 f4       	brcc	.+18     	; 0x914 <__addsf3x+0x9c>
 902:	87 95       	ror	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	b7 95       	ror	r27
 90a:	f7 95       	ror	r31
 90c:	9e 3f       	cpi	r25, 0xFE	; 254
 90e:	08 f0       	brcs	.+2      	; 0x912 <__addsf3x+0x9a>
 910:	b0 cf       	rjmp	.-160    	; 0x872 <__stack+0x13>
 912:	93 95       	inc	r25
 914:	88 0f       	add	r24, r24
 916:	08 f0       	brcs	.+2      	; 0x91a <__addsf3x+0xa2>
 918:	99 27       	eor	r25, r25
 91a:	ee 0f       	add	r30, r30
 91c:	97 95       	ror	r25
 91e:	87 95       	ror	r24
 920:	08 95       	ret

00000922 <__divsf3>:
 922:	0e 94 a5 04 	call	0x94a	; 0x94a <__divsf3x>
 926:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_round>
 92a:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscB>
 92e:	58 f0       	brcs	.+22     	; 0x946 <__divsf3+0x24>
 930:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscA>
 934:	40 f0       	brcs	.+16     	; 0x946 <__divsf3+0x24>
 936:	29 f4       	brne	.+10     	; 0x942 <__divsf3+0x20>
 938:	5f 3f       	cpi	r21, 0xFF	; 255
 93a:	29 f0       	breq	.+10     	; 0x946 <__divsf3+0x24>
 93c:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
 940:	51 11       	cpse	r21, r1
 942:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_szero>
 946:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>

0000094a <__divsf3x>:
 94a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_split3>
 94e:	68 f3       	brcs	.-38     	; 0x92a <__divsf3+0x8>

00000950 <__divsf3_pse>:
 950:	99 23       	and	r25, r25
 952:	b1 f3       	breq	.-20     	; 0x940 <__divsf3+0x1e>
 954:	55 23       	and	r21, r21
 956:	91 f3       	breq	.-28     	; 0x93c <__divsf3+0x1a>
 958:	95 1b       	sub	r25, r21
 95a:	55 0b       	sbc	r21, r21
 95c:	bb 27       	eor	r27, r27
 95e:	aa 27       	eor	r26, r26
 960:	62 17       	cp	r22, r18
 962:	73 07       	cpc	r23, r19
 964:	84 07       	cpc	r24, r20
 966:	38 f0       	brcs	.+14     	; 0x976 <__divsf3_pse+0x26>
 968:	9f 5f       	subi	r25, 0xFF	; 255
 96a:	5f 4f       	sbci	r21, 0xFF	; 255
 96c:	22 0f       	add	r18, r18
 96e:	33 1f       	adc	r19, r19
 970:	44 1f       	adc	r20, r20
 972:	aa 1f       	adc	r26, r26
 974:	a9 f3       	breq	.-22     	; 0x960 <__divsf3_pse+0x10>
 976:	35 d0       	rcall	.+106    	; 0x9e2 <__divsf3_pse+0x92>
 978:	0e 2e       	mov	r0, r30
 97a:	3a f0       	brmi	.+14     	; 0x98a <__divsf3_pse+0x3a>
 97c:	e0 e8       	ldi	r30, 0x80	; 128
 97e:	32 d0       	rcall	.+100    	; 0x9e4 <__divsf3_pse+0x94>
 980:	91 50       	subi	r25, 0x01	; 1
 982:	50 40       	sbci	r21, 0x00	; 0
 984:	e6 95       	lsr	r30
 986:	00 1c       	adc	r0, r0
 988:	ca f7       	brpl	.-14     	; 0x97c <__divsf3_pse+0x2c>
 98a:	2b d0       	rcall	.+86     	; 0x9e2 <__divsf3_pse+0x92>
 98c:	fe 2f       	mov	r31, r30
 98e:	29 d0       	rcall	.+82     	; 0x9e2 <__divsf3_pse+0x92>
 990:	66 0f       	add	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	bb 1f       	adc	r27, r27
 998:	26 17       	cp	r18, r22
 99a:	37 07       	cpc	r19, r23
 99c:	48 07       	cpc	r20, r24
 99e:	ab 07       	cpc	r26, r27
 9a0:	b0 e8       	ldi	r27, 0x80	; 128
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__divsf3_pse+0x56>
 9a4:	bb 0b       	sbc	r27, r27
 9a6:	80 2d       	mov	r24, r0
 9a8:	bf 01       	movw	r22, r30
 9aa:	ff 27       	eor	r31, r31
 9ac:	93 58       	subi	r25, 0x83	; 131
 9ae:	5f 4f       	sbci	r21, 0xFF	; 255
 9b0:	3a f0       	brmi	.+14     	; 0x9c0 <__divsf3_pse+0x70>
 9b2:	9e 3f       	cpi	r25, 0xFE	; 254
 9b4:	51 05       	cpc	r21, r1
 9b6:	78 f0       	brcs	.+30     	; 0x9d6 <__divsf3_pse+0x86>
 9b8:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
 9bc:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_szero>
 9c0:	5f 3f       	cpi	r21, 0xFF	; 255
 9c2:	e4 f3       	brlt	.-8      	; 0x9bc <__divsf3_pse+0x6c>
 9c4:	98 3e       	cpi	r25, 0xE8	; 232
 9c6:	d4 f3       	brlt	.-12     	; 0x9bc <__divsf3_pse+0x6c>
 9c8:	86 95       	lsr	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f7 95       	ror	r31
 9d2:	9f 5f       	subi	r25, 0xFF	; 255
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__divsf3_pse+0x78>
 9d6:	88 0f       	add	r24, r24
 9d8:	91 1d       	adc	r25, r1
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	97 f9       	bld	r25, 7
 9e0:	08 95       	ret
 9e2:	e1 e0       	ldi	r30, 0x01	; 1
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	bb 1f       	adc	r27, r27
 9ec:	62 17       	cp	r22, r18
 9ee:	73 07       	cpc	r23, r19
 9f0:	84 07       	cpc	r24, r20
 9f2:	ba 07       	cpc	r27, r26
 9f4:	20 f0       	brcs	.+8      	; 0x9fe <__divsf3_pse+0xae>
 9f6:	62 1b       	sub	r22, r18
 9f8:	73 0b       	sbc	r23, r19
 9fa:	84 0b       	sbc	r24, r20
 9fc:	ba 0b       	sbc	r27, r26
 9fe:	ee 1f       	adc	r30, r30
 a00:	88 f7       	brcc	.-30     	; 0x9e4 <__divsf3_pse+0x94>
 a02:	e0 95       	com	r30
 a04:	08 95       	ret

00000a06 <__fixsfsi>:
 a06:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fixunssfsi>
 a0a:	68 94       	set
 a0c:	b1 11       	cpse	r27, r1
 a0e:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_szero>
 a12:	08 95       	ret

00000a14 <__fixunssfsi>:
 a14:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_splitA>
 a18:	88 f0       	brcs	.+34     	; 0xa3c <__fixunssfsi+0x28>
 a1a:	9f 57       	subi	r25, 0x7F	; 127
 a1c:	98 f0       	brcs	.+38     	; 0xa44 <__fixunssfsi+0x30>
 a1e:	b9 2f       	mov	r27, r25
 a20:	99 27       	eor	r25, r25
 a22:	b7 51       	subi	r27, 0x17	; 23
 a24:	b0 f0       	brcs	.+44     	; 0xa52 <__fixunssfsi+0x3e>
 a26:	e1 f0       	breq	.+56     	; 0xa60 <__fixunssfsi+0x4c>
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	1a f0       	brmi	.+6      	; 0xa38 <__fixunssfsi+0x24>
 a32:	ba 95       	dec	r27
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__fixunssfsi+0x14>
 a36:	14 c0       	rjmp	.+40     	; 0xa60 <__fixunssfsi+0x4c>
 a38:	b1 30       	cpi	r27, 0x01	; 1
 a3a:	91 f0       	breq	.+36     	; 0xa60 <__fixunssfsi+0x4c>
 a3c:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_zero>
 a40:	b1 e0       	ldi	r27, 0x01	; 1
 a42:	08 95       	ret
 a44:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_zero>
 a48:	67 2f       	mov	r22, r23
 a4a:	78 2f       	mov	r23, r24
 a4c:	88 27       	eor	r24, r24
 a4e:	b8 5f       	subi	r27, 0xF8	; 248
 a50:	39 f0       	breq	.+14     	; 0xa60 <__fixunssfsi+0x4c>
 a52:	b9 3f       	cpi	r27, 0xF9	; 249
 a54:	cc f3       	brlt	.-14     	; 0xa48 <__fixunssfsi+0x34>
 a56:	86 95       	lsr	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	b3 95       	inc	r27
 a5e:	d9 f7       	brne	.-10     	; 0xa56 <__fixunssfsi+0x42>
 a60:	3e f4       	brtc	.+14     	; 0xa70 <__fixunssfsi+0x5c>
 a62:	90 95       	com	r25
 a64:	80 95       	com	r24
 a66:	70 95       	com	r23
 a68:	61 95       	neg	r22
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	08 95       	ret

00000a72 <__floatunsisf>:
 a72:	e8 94       	clt
 a74:	09 c0       	rjmp	.+18     	; 0xa88 <__floatsisf+0x12>

00000a76 <__floatsisf>:
 a76:	97 fb       	bst	r25, 7
 a78:	3e f4       	brtc	.+14     	; 0xa88 <__floatsisf+0x12>
 a7a:	90 95       	com	r25
 a7c:	80 95       	com	r24
 a7e:	70 95       	com	r23
 a80:	61 95       	neg	r22
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	99 23       	and	r25, r25
 a8a:	a9 f0       	breq	.+42     	; 0xab6 <__floatsisf+0x40>
 a8c:	f9 2f       	mov	r31, r25
 a8e:	96 e9       	ldi	r25, 0x96	; 150
 a90:	bb 27       	eor	r27, r27
 a92:	93 95       	inc	r25
 a94:	f6 95       	lsr	r31
 a96:	87 95       	ror	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	b7 95       	ror	r27
 a9e:	f1 11       	cpse	r31, r1
 aa0:	f8 cf       	rjmp	.-16     	; 0xa92 <__floatsisf+0x1c>
 aa2:	fa f4       	brpl	.+62     	; 0xae2 <__floatsisf+0x6c>
 aa4:	bb 0f       	add	r27, r27
 aa6:	11 f4       	brne	.+4      	; 0xaac <__floatsisf+0x36>
 aa8:	60 ff       	sbrs	r22, 0
 aaa:	1b c0       	rjmp	.+54     	; 0xae2 <__floatsisf+0x6c>
 aac:	6f 5f       	subi	r22, 0xFF	; 255
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	16 c0       	rjmp	.+44     	; 0xae2 <__floatsisf+0x6c>
 ab6:	88 23       	and	r24, r24
 ab8:	11 f0       	breq	.+4      	; 0xabe <__floatsisf+0x48>
 aba:	96 e9       	ldi	r25, 0x96	; 150
 abc:	11 c0       	rjmp	.+34     	; 0xae0 <__floatsisf+0x6a>
 abe:	77 23       	and	r23, r23
 ac0:	21 f0       	breq	.+8      	; 0xaca <__floatsisf+0x54>
 ac2:	9e e8       	ldi	r25, 0x8E	; 142
 ac4:	87 2f       	mov	r24, r23
 ac6:	76 2f       	mov	r23, r22
 ac8:	05 c0       	rjmp	.+10     	; 0xad4 <__floatsisf+0x5e>
 aca:	66 23       	and	r22, r22
 acc:	71 f0       	breq	.+28     	; 0xaea <__floatsisf+0x74>
 ace:	96 e8       	ldi	r25, 0x86	; 134
 ad0:	86 2f       	mov	r24, r22
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	60 e0       	ldi	r22, 0x00	; 0
 ad6:	2a f0       	brmi	.+10     	; 0xae2 <__floatsisf+0x6c>
 ad8:	9a 95       	dec	r25
 ada:	66 0f       	add	r22, r22
 adc:	77 1f       	adc	r23, r23
 ade:	88 1f       	adc	r24, r24
 ae0:	da f7       	brpl	.-10     	; 0xad8 <__floatsisf+0x62>
 ae2:	88 0f       	add	r24, r24
 ae4:	96 95       	lsr	r25
 ae6:	87 95       	ror	r24
 ae8:	97 f9       	bld	r25, 7
 aea:	08 95       	ret

00000aec <__fp_inf>:
 aec:	97 f9       	bld	r25, 7
 aee:	9f 67       	ori	r25, 0x7F	; 127
 af0:	80 e8       	ldi	r24, 0x80	; 128
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	60 e0       	ldi	r22, 0x00	; 0
 af6:	08 95       	ret

00000af8 <__fp_nan>:
 af8:	9f ef       	ldi	r25, 0xFF	; 255
 afa:	80 ec       	ldi	r24, 0xC0	; 192
 afc:	08 95       	ret

00000afe <__fp_pscA>:
 afe:	00 24       	eor	r0, r0
 b00:	0a 94       	dec	r0
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	18 06       	cpc	r1, r24
 b08:	09 06       	cpc	r0, r25
 b0a:	08 95       	ret

00000b0c <__fp_pscB>:
 b0c:	00 24       	eor	r0, r0
 b0e:	0a 94       	dec	r0
 b10:	12 16       	cp	r1, r18
 b12:	13 06       	cpc	r1, r19
 b14:	14 06       	cpc	r1, r20
 b16:	05 06       	cpc	r0, r21
 b18:	08 95       	ret

00000b1a <__fp_round>:
 b1a:	09 2e       	mov	r0, r25
 b1c:	03 94       	inc	r0
 b1e:	00 0c       	add	r0, r0
 b20:	11 f4       	brne	.+4      	; 0xb26 <__fp_round+0xc>
 b22:	88 23       	and	r24, r24
 b24:	52 f0       	brmi	.+20     	; 0xb3a <__fp_round+0x20>
 b26:	bb 0f       	add	r27, r27
 b28:	40 f4       	brcc	.+16     	; 0xb3a <__fp_round+0x20>
 b2a:	bf 2b       	or	r27, r31
 b2c:	11 f4       	brne	.+4      	; 0xb32 <__fp_round+0x18>
 b2e:	60 ff       	sbrs	r22, 0
 b30:	04 c0       	rjmp	.+8      	; 0xb3a <__fp_round+0x20>
 b32:	6f 5f       	subi	r22, 0xFF	; 255
 b34:	7f 4f       	sbci	r23, 0xFF	; 255
 b36:	8f 4f       	sbci	r24, 0xFF	; 255
 b38:	9f 4f       	sbci	r25, 0xFF	; 255
 b3a:	08 95       	ret

00000b3c <__fp_split3>:
 b3c:	57 fd       	sbrc	r21, 7
 b3e:	90 58       	subi	r25, 0x80	; 128
 b40:	44 0f       	add	r20, r20
 b42:	55 1f       	adc	r21, r21
 b44:	59 f0       	breq	.+22     	; 0xb5c <__fp_splitA+0x10>
 b46:	5f 3f       	cpi	r21, 0xFF	; 255
 b48:	71 f0       	breq	.+28     	; 0xb66 <__fp_splitA+0x1a>
 b4a:	47 95       	ror	r20

00000b4c <__fp_splitA>:
 b4c:	88 0f       	add	r24, r24
 b4e:	97 fb       	bst	r25, 7
 b50:	99 1f       	adc	r25, r25
 b52:	61 f0       	breq	.+24     	; 0xb6c <__fp_splitA+0x20>
 b54:	9f 3f       	cpi	r25, 0xFF	; 255
 b56:	79 f0       	breq	.+30     	; 0xb76 <__fp_splitA+0x2a>
 b58:	87 95       	ror	r24
 b5a:	08 95       	ret
 b5c:	12 16       	cp	r1, r18
 b5e:	13 06       	cpc	r1, r19
 b60:	14 06       	cpc	r1, r20
 b62:	55 1f       	adc	r21, r21
 b64:	f2 cf       	rjmp	.-28     	; 0xb4a <__fp_split3+0xe>
 b66:	46 95       	lsr	r20
 b68:	f1 df       	rcall	.-30     	; 0xb4c <__fp_splitA>
 b6a:	08 c0       	rjmp	.+16     	; 0xb7c <__fp_splitA+0x30>
 b6c:	16 16       	cp	r1, r22
 b6e:	17 06       	cpc	r1, r23
 b70:	18 06       	cpc	r1, r24
 b72:	99 1f       	adc	r25, r25
 b74:	f1 cf       	rjmp	.-30     	; 0xb58 <__fp_splitA+0xc>
 b76:	86 95       	lsr	r24
 b78:	71 05       	cpc	r23, r1
 b7a:	61 05       	cpc	r22, r1
 b7c:	08 94       	sec
 b7e:	08 95       	ret

00000b80 <__fp_zero>:
 b80:	e8 94       	clt

00000b82 <__fp_szero>:
 b82:	bb 27       	eor	r27, r27
 b84:	66 27       	eor	r22, r22
 b86:	77 27       	eor	r23, r23
 b88:	cb 01       	movw	r24, r22
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__gesf2>:
 b8e:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_cmp>
 b92:	08 f4       	brcc	.+2      	; 0xb96 <__gesf2+0x8>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	08 95       	ret

00000b98 <__mulsf3>:
 b98:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3x>
 b9c:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_round>
 ba0:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscA>
 ba4:	38 f0       	brcs	.+14     	; 0xbb4 <__mulsf3+0x1c>
 ba6:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscB>
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__mulsf3+0x1c>
 bac:	95 23       	and	r25, r21
 bae:	11 f0       	breq	.+4      	; 0xbb4 <__mulsf3+0x1c>
 bb0:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
 bb4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
 bb8:	11 24       	eor	r1, r1
 bba:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_szero>

00000bbe <__mulsf3x>:
 bbe:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_split3>
 bc2:	70 f3       	brcs	.-36     	; 0xba0 <__mulsf3+0x8>

00000bc4 <__mulsf3_pse>:
 bc4:	95 9f       	mul	r25, r21
 bc6:	c1 f3       	breq	.-16     	; 0xbb8 <__mulsf3+0x20>
 bc8:	95 0f       	add	r25, r21
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	55 1f       	adc	r21, r21
 bce:	62 9f       	mul	r22, r18
 bd0:	f0 01       	movw	r30, r0
 bd2:	72 9f       	mul	r23, r18
 bd4:	bb 27       	eor	r27, r27
 bd6:	f0 0d       	add	r31, r0
 bd8:	b1 1d       	adc	r27, r1
 bda:	63 9f       	mul	r22, r19
 bdc:	aa 27       	eor	r26, r26
 bde:	f0 0d       	add	r31, r0
 be0:	b1 1d       	adc	r27, r1
 be2:	aa 1f       	adc	r26, r26
 be4:	64 9f       	mul	r22, r20
 be6:	66 27       	eor	r22, r22
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	66 1f       	adc	r22, r22
 bee:	82 9f       	mul	r24, r18
 bf0:	22 27       	eor	r18, r18
 bf2:	b0 0d       	add	r27, r0
 bf4:	a1 1d       	adc	r26, r1
 bf6:	62 1f       	adc	r22, r18
 bf8:	73 9f       	mul	r23, r19
 bfa:	b0 0d       	add	r27, r0
 bfc:	a1 1d       	adc	r26, r1
 bfe:	62 1f       	adc	r22, r18
 c00:	83 9f       	mul	r24, r19
 c02:	a0 0d       	add	r26, r0
 c04:	61 1d       	adc	r22, r1
 c06:	22 1f       	adc	r18, r18
 c08:	74 9f       	mul	r23, r20
 c0a:	33 27       	eor	r19, r19
 c0c:	a0 0d       	add	r26, r0
 c0e:	61 1d       	adc	r22, r1
 c10:	23 1f       	adc	r18, r19
 c12:	84 9f       	mul	r24, r20
 c14:	60 0d       	add	r22, r0
 c16:	21 1d       	adc	r18, r1
 c18:	82 2f       	mov	r24, r18
 c1a:	76 2f       	mov	r23, r22
 c1c:	6a 2f       	mov	r22, r26
 c1e:	11 24       	eor	r1, r1
 c20:	9f 57       	subi	r25, 0x7F	; 127
 c22:	50 40       	sbci	r21, 0x00	; 0
 c24:	9a f0       	brmi	.+38     	; 0xc4c <__mulsf3_pse+0x88>
 c26:	f1 f0       	breq	.+60     	; 0xc64 <__mulsf3_pse+0xa0>
 c28:	88 23       	and	r24, r24
 c2a:	4a f0       	brmi	.+18     	; 0xc3e <__mulsf3_pse+0x7a>
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	bb 1f       	adc	r27, r27
 c32:	66 1f       	adc	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	91 50       	subi	r25, 0x01	; 1
 c3a:	50 40       	sbci	r21, 0x00	; 0
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__mulsf3_pse+0x64>
 c3e:	9e 3f       	cpi	r25, 0xFE	; 254
 c40:	51 05       	cpc	r21, r1
 c42:	80 f0       	brcs	.+32     	; 0xc64 <__mulsf3_pse+0xa0>
 c44:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_inf>
 c48:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_szero>
 c4c:	5f 3f       	cpi	r21, 0xFF	; 255
 c4e:	e4 f3       	brlt	.-8      	; 0xc48 <__mulsf3_pse+0x84>
 c50:	98 3e       	cpi	r25, 0xE8	; 232
 c52:	d4 f3       	brlt	.-12     	; 0xc48 <__mulsf3_pse+0x84>
 c54:	86 95       	lsr	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f7 95       	ror	r31
 c5e:	e7 95       	ror	r30
 c60:	9f 5f       	subi	r25, 0xFF	; 255
 c62:	c1 f7       	brne	.-16     	; 0xc54 <__mulsf3_pse+0x90>
 c64:	fe 2b       	or	r31, r30
 c66:	88 0f       	add	r24, r24
 c68:	91 1d       	adc	r25, r1
 c6a:	96 95       	lsr	r25
 c6c:	87 95       	ror	r24
 c6e:	97 f9       	bld	r25, 7
 c70:	08 95       	ret

00000c72 <__fp_cmp>:
 c72:	99 0f       	add	r25, r25
 c74:	00 08       	sbc	r0, r0
 c76:	55 0f       	add	r21, r21
 c78:	aa 0b       	sbc	r26, r26
 c7a:	e0 e8       	ldi	r30, 0x80	; 128
 c7c:	fe ef       	ldi	r31, 0xFE	; 254
 c7e:	16 16       	cp	r1, r22
 c80:	17 06       	cpc	r1, r23
 c82:	e8 07       	cpc	r30, r24
 c84:	f9 07       	cpc	r31, r25
 c86:	c0 f0       	brcs	.+48     	; 0xcb8 <__fp_cmp+0x46>
 c88:	12 16       	cp	r1, r18
 c8a:	13 06       	cpc	r1, r19
 c8c:	e4 07       	cpc	r30, r20
 c8e:	f5 07       	cpc	r31, r21
 c90:	98 f0       	brcs	.+38     	; 0xcb8 <__fp_cmp+0x46>
 c92:	62 1b       	sub	r22, r18
 c94:	73 0b       	sbc	r23, r19
 c96:	84 0b       	sbc	r24, r20
 c98:	95 0b       	sbc	r25, r21
 c9a:	39 f4       	brne	.+14     	; 0xcaa <__fp_cmp+0x38>
 c9c:	0a 26       	eor	r0, r26
 c9e:	61 f0       	breq	.+24     	; 0xcb8 <__fp_cmp+0x46>
 ca0:	23 2b       	or	r18, r19
 ca2:	24 2b       	or	r18, r20
 ca4:	25 2b       	or	r18, r21
 ca6:	21 f4       	brne	.+8      	; 0xcb0 <__fp_cmp+0x3e>
 ca8:	08 95       	ret
 caa:	0a 26       	eor	r0, r26
 cac:	09 f4       	brne	.+2      	; 0xcb0 <__fp_cmp+0x3e>
 cae:	a1 40       	sbci	r26, 0x01	; 1
 cb0:	a6 95       	lsr	r26
 cb2:	8f ef       	ldi	r24, 0xFF	; 255
 cb4:	81 1d       	adc	r24, r1
 cb6:	81 1d       	adc	r24, r1
 cb8:	08 95       	ret

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
